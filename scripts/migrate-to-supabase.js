const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// SQLite„Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ
const dbPath = path.join(__dirname, '..', 'prisma', 'dev.db');

// „Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
if (!fs.existsSync(dbPath)) {
  console.error('‚ùå SQLite„Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', dbPath);
  console.log('üí° ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
  console.log('   npm run db:generate');
  console.log('   npm run db:push');
  process.exit(1);
}

console.log('=== SQLite„Åã„ÇâSupabase„Å∏„ÅÆÁßªË°å„Çπ„ÇØ„É™„Éó„ÉàÁîüÊàê ===\n');
console.log(`üìÅ „Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´: ${dbPath}`);

// „Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Å´Â§±Êïó:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ SQLite„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åó„Åæ„Åó„Åü');
});

// ÁßªË°åÁî®SQL„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ
const migrationFile = path.join(__dirname, '..', 'supabase-migration.sql');

// SQL„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÊ†ºÁ¥ç„Åô„ÇãÈÖçÂàó
let sqlContent = [
  '-- SQLite„Åã„ÇâSupabase„Å∏„ÅÆÁßªË°å„Çπ„ÇØ„É™„Éó„Éà',
  '-- „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÇíSupabase„ÅÆSQL Editor„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  '-- ÁîüÊàêÊó•ÊôÇ: ' + new Date().toISOString(),
  '',
  '-- Êó¢Â≠ò„ÅÆ„ÉÜ„Éº„Éñ„É´„ÇíÂâäÈô§ÔºàÊ≥®ÊÑè: „Éá„Éº„Çø„ÅåÂ§±„Çè„Çå„Åæ„ÅôÔºâ',
  'DROP TABLE IF EXISTS "AccessPermission" CASCADE;',
  'DROP TABLE IF EXISTS "UserRole" CASCADE;',
  'DROP TABLE IF EXISTS "AIConfig" CASCADE;',
  'DROP TABLE IF EXISTS "AdminSettings" CASCADE;',
  'DROP TABLE IF EXISTS "WorkProgress" CASCADE;',
  'DROP TABLE IF EXISTS "PromptUpload" CASCADE;',
  'DROP TABLE IF EXISTS "SystemPrompt" CASCADE;',
  'DROP TABLE IF EXISTS "TaskDefinition" CASCADE;',
  'DROP TABLE IF EXISTS "Subject" CASCADE;',
  'DROP TABLE IF EXISTS "User" CASCADE;',
  '',
  '-- „ÉÜ„Éº„Éñ„É´‰ΩúÊàê',
  ''
];

// „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíÂèñÂæó
db.all("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE '_prisma_%' ORDER BY name", (err, tables) => {
  if (err) {
    console.error('‚ùå „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÅÆÂèñÂæó„Å´Â§±Êïó:', err);
    db.close();
    return;
  }

  if (tables.length === 0) {
    console.log('‚ö†Ô∏è  ÁßªË°åÂØæË±°„ÅÆ„ÉÜ„Éº„Éñ„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    console.log('üí° „Éá„Éº„Çø„Éô„Éº„Çπ„Å´„ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    db.close();
    return;
  }

  console.log('üìã ÁßªË°åÂØæË±°„ÉÜ„Éº„Éñ„É´:');
  tables.forEach(table => {
    console.log(`   - ${table.name}`);
  });
  console.log('');

  // ÂêÑ„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†„ÇíÂàÜÊûê„Åó„Å¶ÁßªË°åSQL„ÇíÁîüÊàê
  let completedTables = 0;
  tables.forEach(table => {
    generateTableMigration(table.name, () => {
      completedTables++;
      if (completedTables === tables.length) {
        generateDataMigration(tables, () => {
          // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Å®Âà∂Á¥Ñ„ÇíËøΩÂä†
          generateIndexesAndConstraints(tables, () => {
            // SQL„Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„Åø
            try {
              fs.writeFileSync(migrationFile, sqlContent.join('\n'));
              console.log(`\n‚úÖ ÁßªË°å„Çπ„ÇØ„É™„Éó„Éà„ÅåÁîüÊàê„Åï„Çå„Åæ„Åó„Åü: ${migrationFile}`);
              console.log('\nüìù ÁßªË°åÊâãÈ†Ü:');
              console.log('1. Supabase„ÅÆ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´„É≠„Ç∞„Ç§„É≥');
              console.log('2. SQL Editor„ÇíÈñã„Åè');
              console.log('3. ÁîüÊàê„Åï„Çå„ÅüSQL„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„Çí„Ç≥„Éî„Éº&„Éö„Éº„Çπ„Éà');
              console.log('4. ÂÆüË°å„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ');
              console.log('5. „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„Å®„Éá„Éº„Çø„ÅåÁßªË°å„Åï„Çå„Åæ„Åô');
              console.log('\n‚ö†Ô∏è  Ê≥®ÊÑè: Êó¢Â≠ò„ÅÆ„Éá„Éº„Çø„ÅØÂ§±„Çè„Çå„Åæ„Åô„ÄÇ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÇíÂèñ„Å£„Å¶„Åã„ÇâÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            } catch (writeErr) {
              console.error('‚ùå „Éï„Ç°„Ç§„É´Êõ∏„ÅçËæº„Åø„Å´Â§±Êïó:', writeErr);
            }
            db.close();
          });
        });
      }
    });
  });
});

function generateTableMigration(tableName, callback) {
  console.log(`üîç „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÇíÂàÜÊûê‰∏≠: ${tableName}`);
  
  // „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÇíÂèñÂæó
  db.all(`PRAGMA table_info(${tableName})`, (err, columns) => {
    if (err) {
      console.error(`‚ùå „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÅÆÂèñÂæó„Å´Â§±Êïó (${tableName}):`, err);
      callback();
      return;
    }

    // CREATE TABLEÊñá„ÇíÁîüÊàê
    sqlContent.push(`-- ${tableName}„ÉÜ„Éº„Éñ„É´`);
    sqlContent.push(`CREATE TABLE IF NOT EXISTS "${tableName}" (`);
    
    const columnDefs = columns.map(col => {
      let def = `    "${col.name}" ${mapSqliteTypeToPostgres(col.type)}`;
      
      if (col.notnull) {
        def += ' NOT NULL';
      }
      
      if (col.pk) {
        def += ' PRIMARY KEY';
      } else if (col.dflt_value !== null) {
        const defaultValue = mapDefaultValue(col.dflt_value, col.type);
        def += ` DEFAULT ${defaultValue}`;
      }
      
      return def;
    });
    
    sqlContent.push(columnDefs.join(',\n'));
    sqlContent.push(');');
    sqlContent.push('');

    callback();
  });
}

function generateDataMigration(tables, callback) {
  console.log('\nüìä „Éá„Éº„ÇøÁßªË°åSQL„ÇíÁîüÊàê‰∏≠...');
  
  sqlContent.push('-- „Éá„Éº„ÇøÁßªË°å');
  sqlContent.push('');

  let completedTables = 0;
  tables.forEach(table => {
    // „Éá„Éº„Çø„ÇíÂèñÂæó
    db.all(`SELECT * FROM ${table.name}`, (err, rows) => {
      if (err) {
        console.error(`‚ùå „Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó (${table.name}):`, err);
      } else if (rows.length > 0) {
        console.log(`üìù ${table.name}: ${rows.length}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÁßªË°å`);
        
        // INSERTÊñá„ÇíÁîüÊàê
        sqlContent.push(`-- ${table.name}„ÅÆ„Éá„Éº„ÇøÁßªË°å (${rows.length}‰ª∂)`);
        
        rows.forEach(row => {
          const columns = Object.keys(row);
          const values = columns.map(col => {
            const value = row[col];
            if (value === null) {
              return 'NULL';
            } else if (typeof value === 'string') {
              return `'${value.replace(/'/g, "''")}'`;
            } else if (typeof value === 'boolean') {
              return value ? 'true' : 'false';
            } else if (typeof value === 'number') {
              // SQLite„ÅÆ0/1„ÇíPostgreSQL„ÅÆboolean„Å´Â§âÊèõ
              const columnType = columns.find(c => c.name === col)?.type?.toUpperCase() || '';
              if (columnType.includes('BOOLEAN') && (value === 0 || value === 1)) {
                return value === 1 ? 'true' : 'false';
              }
              return value;
            } else {
              return value;
            }
          });
          
          sqlContent.push(`INSERT INTO "${table.name}" ("${columns.join('", "')}") VALUES (${values.join(', ')});`);
        });
        sqlContent.push('');
      } else {
        console.log(`‚ÑπÔ∏è  ${table.name}: „Éá„Éº„Çø„Å™„Åó`);
      }

      completedTables++;
      if (completedTables === tables.length) {
        callback();
      }
    });
  });
}

function generateIndexesAndConstraints(tables, callback) {
  console.log('\nüîó „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Å®Âà∂Á¥Ñ„ÇíÁîüÊàê‰∏≠...');
  
  sqlContent.push('-- „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Å®Âà∂Á¥Ñ');
  sqlContent.push('');

  // „É¶„Éã„Éº„ÇØÂà∂Á¥Ñ
  sqlContent.push('-- „É¶„Éã„Éº„ÇØÂà∂Á¥Ñ');
  sqlContent.push('ALTER TABLE "User" ADD CONSTRAINT "User_userId_key" UNIQUE ("userId");');
  sqlContent.push('ALTER TABLE "Subject" ADD CONSTRAINT "Subject_subjectId_key" UNIQUE ("subjectId");');
  sqlContent.push('ALTER TABLE "TaskDefinition" ADD CONSTRAINT "TaskDefinition_subjectId_examType_key" UNIQUE ("subjectId", "examType");');
  sqlContent.push('ALTER TABLE "WorkProgress" ADD CONSTRAINT "WorkProgress_userId_taskId_fileType_key" UNIQUE ("userId", "taskId", "fileType");');
  sqlContent.push('ALTER TABLE "UserRole" ADD CONSTRAINT "UserRole_userId_role_key" UNIQUE ("userId", "role");');
  sqlContent.push('ALTER TABLE "AdminSettings" ADD CONSTRAINT "AdminSettings_settingKey_key" UNIQUE ("settingKey");');
  sqlContent.push('');

  // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
  sqlContent.push('-- „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "User_userId_idx" ON "User"("userId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "Subject_subjectId_idx" ON "Subject"("subjectId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "TaskDefinition_subjectId_idx" ON "TaskDefinition"("subjectId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "WorkProgress_userId_idx" ON "WorkProgress"("userId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "WorkProgress_subjectId_idx" ON "WorkProgress"("subjectId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "PromptUpload_subjectId_idx" ON "PromptUpload"("subjectId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "PromptUpload_taskId_idx" ON "PromptUpload"("taskId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "SystemPrompt_subjectId_idx" ON "SystemPrompt"("subjectId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "SystemPrompt_createdBy_idx" ON "SystemPrompt"("createdBy");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "UserRole_userId_idx" ON "UserRole"("userId");');
  sqlContent.push('CREATE INDEX IF NOT EXISTS "AccessPermission_userId_idx" ON "AccessPermission"("userId");');
  sqlContent.push('');

  callback();
}

function mapSqliteTypeToPostgres(sqliteType) {
  const type = sqliteType.toUpperCase();
  
  if (type.includes('INTEGER') || type.includes('INT')) {
    return 'INTEGER';
  } else if (type.includes('REAL') || type.includes('FLOAT') || type.includes('DOUBLE')) {
    return 'REAL';
  } else if (type.includes('TEXT') || type.includes('VARCHAR') || type.includes('CHAR')) {
    return 'TEXT';
  } else if (type.includes('BLOB')) {
    return 'BYTEA';
  } else if (type.includes('BOOLEAN') || type.includes('BOOL')) {
    return 'BOOLEAN';
  } else if (type.includes('JSON')) {
    return 'JSONB';
  } else if (type.includes('DATETIME')) {
    return 'TIMESTAMP(3)';
  } else {
    return 'TEXT'; // „Éá„Éï„Ç©„É´„Éà
  }
}

function mapDefaultValue(value, type) {
  if (value === null) {
    return 'NULL';
  }
  
  const sqliteType = type.toUpperCase();
  
  if (sqliteType.includes('DATETIME') && value === 'CURRENT_TIMESTAMP') {
    return 'CURRENT_TIMESTAMP';
  } else if (sqliteType.includes('BOOLEAN')) {
    return value === '1' ? 'true' : 'false';
  } else if (typeof value === 'string' && value.startsWith("'") && value.endsWith("'")) {
    return value; // Êó¢„Å´„ÇØ„Ç©„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Çã
  } else if (typeof value === 'string') {
    return `'${value}'`;
  } else {
    return value;
  }
} 